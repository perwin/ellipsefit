NOTES ON HOW IRAF/PHOTUTILS.ISOPHOTE ELLIPSE FITTING WORK


NEXT STEPS:

[ ] Investigate how photutils.isophote works
	[ ] Generate single-ellipse isophote profiles (no sigma-clipping) to see
	whether/how radii and angles output varies
	
[ ] profile-generation (test_profile_generation_main.cpp)

	[X] Add code to read in image
	
	[ ] Add code to do basic nearest-neighbor profile extraction
		-- isophote.sample.EllipseSample
		-- isophote.integrator._NearestNeighborIntegrator
		
	

Important functions
	â€¢ Sample ellipse from image
		isophote.sample.EllipseSample
			_extract() -- generates (sigma-clipped) angles, radii, intensities, sector_area vectors
			("individual extracted sample points stored here [in these lists]")
				==> result = np.array([np.array(angles), np.array(radii),
                           np.array(intensities)])
            
            [] integration to populate vectors
            
            # build integrator
            # the integrator's purpose is to determine the intensity at r,phi
            #    _NearestNeighborIntegrator: just get the value of the pixel closest to r,phi
            #    _BiLinearIntegrator: get value at r,phi by linear interpolation of 4 closest pixels
            #    _AreaIntegrator: more complex
        	integrator = INTEGRATORS[self.integrmode](self.image, self.geometry, angles, radii, intensities)
        	
            # initialize walk along elliptical path
       		radius = self.geometry.initial_polar_radius
       		phi = self.geometry.initial_polar_angle

        	# optional step
        	# In case of an area integrator, ask the integrator to deliver a hint of how much area the sectors will have.
        	...
        	

			# walk along elliptical path, integrating at specified
        	# places defined by polar vector. Need to go a bit beyond
        	# full circle to ensure full coverage.
        	while phi <= np.pi * 2.0 + phi_min:
            	# do the integration at phi-radius position, and append
            	# results to the angles, radii, and intensities lists.
            	integrator.integrate(radius, phi)

            	# store sector area locally
            	sector_areas.append(integrator.get_sector_area())

            	# update total number of points
            	self.total_points += 1

            	# update angle and radius to be used to define
            	# next polar vector along the elliptical path
            	#    _NearestNeighborIntegrator AND _BiLinearIntegrator: returns 1/r
            	#    _AreaIntegrator: slighty more complicated calculation
            	phistep_ = integrator.get_polar_angle_step()
            	# PE: make sure increment in angle is 0.5 radians *or smaller*
            	phi += min(phistep_, 0.5)
            	radius = self.geometry.radius(phi)
       		 
            
            [] sigma-clip angles, radii, intensities (reduces total number of points)
            	angles, radii, intensities = self._sigma_clip(angles, radii, intensities)
        
        Possibly less interesting code:
        	# store average sector area [executed after integration is done]
        	self.sector_area = np.mean(np.array(sector_areas))

COMMENTS:
	Note that the radii values will depend on the parameters of the ellipse (a0, pa0, ell0)
	The angle values will *also* depend on the ellipse parameters, since the angular
	increment is determined by integrator.get_polar_angle_step() [= 1/r, unless using
	area integration]
	The question is: *when* should we do the sigma clipping?
		- as EllipseSample() does: inside the profile extraction
		- outside (simplifies)


ANGULAR STEPS ALONG THE ELLIPSE:
	The angular spacing along an ellipse is determined by integrator.get_polar_angle_step()
	
	In the case of _NearestNeighborIntegrator and _BiLinearIntegrator, the angular
	spacing is *constant* and = 1/r
	
	In the case of area integrators (the "mean" and "median" subclasses of _AreaIntegrator)
	it is seemingly more complex, but the output seems to be the same (? -- see notes_on_ellipse-sampling.txt)


Main fitting of an individual ellipse:
	
		1. Sample along current ellipse
		2. Least-squares minimization to get I0,A1,B1,A2,B2
		3. Check for possible convergence or stop-condition
			A. If not converged: Update x0,y0,PA,ell (and I0?) of ellipse
			B. Go to 1


1. Given a current/initial ellipse -- sma, PA, ell
	Sample along the ellipse within the image
		-- exclude masked pixels
	Compute things like gradient
	Fit model ellipse to data
	(Generate updated estimates for PA, ell)
	Iterate
	If converged/stop-iteration:
		Compute useful extra info (higher-order Fourier components, tflux, etc.)

2. Update sma; goto 1



PROFILING of photutils.isophote ellipse fitting
In [125]: import cProfile
In [131]: import pstats
In [135]: from pstats import SortKey

import ellipse_fitting
In [126]: ff = '/Users/erwin/Beleriand/data/CGS/NGC1201_I.fits'
In [130]: cProfile.run('ellipse_fitting.DoEllipse(ff, 1105.7,1024.0, 25, 27, 0.3, amax=50, delta=0.05)', 'DoEllipse_stats.txt')
In [132]: p = pstats.Stats('DoEllipse_stats.txt')

In [138]: p.sort_stats(SortKey.CUMULATIVE).print_stats(20)
Tue Jan 17 14:06:46 2023    DoEllipse_stats.txt

         20029767 function calls (20026165 primitive calls) in 81.062 seconds

   Ordered by: cumulative time
   List reduced from 404 to 20 due to restriction <20>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   81.062   81.062 {built-in method builtins.exec}
        1    0.000    0.000   81.062   81.062 <string>:1(<module>)
        1    0.000    0.000   81.062   81.062 ellipse_fitting.py:198(DoEllipse)
        1    0.000    0.000   80.562   80.562 ellipse_fitting.py:113(do_efit)
        1    0.000    0.000   80.562   80.562 ellipse.py:202(fit_image)
       58    0.000    0.000   80.561    1.389 ellipse.py:507(fit_isophote)
       58    0.001    0.000   80.561    1.389 ellipse.py:650(_iterative)
       58    0.066    0.001   80.511    1.388 fitter.py:45(fit)
     1182    0.091    0.000   76.983    0.065 sample.py:280(update)
     4139    0.012    0.000   75.803    0.018 sample.py:135(extract)
     1774    1.458    0.001   75.791    0.043 sample.py:155(_extract)
    54650   16.212    0.000   66.083    0.001 integrator.py:222(integrate)
     1183    0.100    0.000   53.696    0.045 sample.py:337(_get_gradient)
  1666592    5.676    0.000   27.962    0.000 geometry.py:398(to_polar)
  1666534   17.509    0.000   21.227    0.000 geometry.py:439(_to_polar_scalar)
    54650    7.741    0.000   12.762    0.000 geometry.py:291(initialize_sector_geometry)
     1774    0.098    0.000    3.210    0.002 sample.py:245(_sigma_clip)
     5322    1.163    0.000    3.016    0.001 sample.py:254(_iter_sigma_clip)
23675/22794    0.076    0.000    2.997    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}
    79816    2.764    0.000    2.764    0.000 geometry.py:273(radius)



SOME NOTES ON CIAMBUAR (2015) "ISOFIT"

It appears that the key difference may be in how the Fourier decomposition is done,
in that IRAF ellipse computes the Fourier expansion as a function of phi [polar azimuthal
angle] while Ciambur computes it as a function of eccentric anomaly.

(The claim in Sec.3 of Ciambur 2015 that IRAF ellipse *samples* the ellipse using
evenly spaced azimuthal angles is *wrong*, but may not be that relevant.)

[ ] What happens if we take the same ellipse sample (I, r, phi) and fit it using
IRAF ellipse Fourier decomp. vs converting phi to ecc.anomaly and doing the
Fourier decomp. using that?




